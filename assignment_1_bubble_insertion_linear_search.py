# -*- coding: utf-8 -*-
"""Assignment_1_bubble.insertion.linear_search

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iuHNRoq84laJen-hnJARPmwhqlAHxgjq
"""

#Linear Search

array = [1,2,3,4,5,6,7,8,9,10] #searching for #7
n = 7

def linear_search(array, n):
  i = 0
  while i < len(array):
    if array[i] == n:
      return True
    i = i + 1
  return False

#Complexity: O(n)
#It is O(n) because it has to do the same amount of work for each index inside of the array, so it is even.

#NO REFERENCES USED

#Insertion Sort

array = [6,1,2,3,5,4,9,10,7,8]

def insertion_sort(array):
  for i in range(1, len(array)):
    j = i
    current = array[j]
    while array[j - 1] > array[j] and j > 0:
      array[j] = array[j-1]
      j = j-1
      array[j] = current

insertion_sort(array)
print(array)

#Complexity: O(N^2)
#It is O(N^2) because this sort deals with a comparison swap and it has a nested loop in order to compare two arrays.  This is a small input size so it will be efficient.
#REFERENCES

#https://www.pythoncentral.io/insertion-sort-implementation-guide/
#https://www.youtube.com/watch?v=R_wDA-PmGE4&t=392s

#Bubble Sort

array = [5,1,4,2,3,6,9,8,7,10]
#n = len(array) - 1

#def bubble_sort(array):
#  sorted = False
#  while not sorted:
#    sorted = True
#    for i in range(0, n):
#      if array[i] > array[i + 1]:
#        sorted = False
#        array[i], array[i + 1] = array[i + 1], array[i]
#  return array


#NEW CODE ATTEMPT
  #(2 loops)

def bubble_sort(array):
  #get length of array
  n = len(array)
  #go through array
  for i in range(n):
    #don't loop check if element is in its proper place (last index > ...)
    for j in range(0, n-i-1):
      #swap element in each index if the current element is greater than the next element
      if array[j] > array[j + 1]:
        array[j], array[j + 1] = array[j + 1], array[j]
  return array


bubble_sort(array)
print(array)

#Complexity: O(N^2)
#It is O(N^2) because this sort deals with multiple passing of indexes and elements. It compares indexes with each pass and the number of operations increase. It is also a small input size.
#REFERENCES
#https://www.geeksforgeeks.org/python-program-for-bubble-sort/
#https://www.youtube.com/watch?v=g_xesqdQqvA
#https://www.youtube.com/watch?v=Vca808JTbI8