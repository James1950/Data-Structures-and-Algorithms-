# -*- coding: utf-8 -*-
"""Binary_Search_Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SHAuzL3EiStH4FrdlpbyBwrHPztaCfbj
"""

#James Baumhardt
#Binary Search

# create the halves and use middle to find the number.
#inputs are arraylist, 0, max length of array, and search key
def binary_search(array, left_index, right_index, key):

  #if the left is larger than right, invalid
  if (left_index > right_index):
    return None
  else:
    if left_index <= right_index:
      #get middle index
      middle_index = (left_index + right_index) // 2
      print(left_index,middle_index,right_index)

      #if key is in middle
      if array[middle_index] == key:
        return middle_index

      #if key is larger than middle, search right portion
      elif array[middle_index] < key:
        return binary_search(array, middle_index + 1, right_index, key)

      #if element is smaller than middle, search left portion
      else:
        return binary_search(array, left_index, middle_index - 1, key)

    #element is not located in array
    else:
      return -1


#sorted array
array = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]

#key (num we are searching for)
key = 16

#2 endpoints
left_index = 0
right_index = len(array) - 1

location = binary_search(array, left_index, right_index, key)

print("-----------------------")
print("The element",key,"is present at index",location)



#Complexity Analysis
#TIME
#Best Case = O(1) (if the key is found in the first comparison)
#Avergae Case = O(log n) (Each time the algorithm is called, the space in order to find the key is reduced by half. It will take time to find the element)
#Worst Case = O(log n) (The key is not located inside of the array and the algorithm just ran with no result except  for taking up time)

#SPACE
# The space complexity is O(1) because this algorithm uses the same amount of memory every time the algorithm is run. "constant"

#References
#https://www.youtube.com/watch?v=MFhxShGxHWc
#https://www.youtube.com/watch?v=E6IOrZUpvSE
#https://www.youtube.com/watch?v=SfxLtJyxaPg

