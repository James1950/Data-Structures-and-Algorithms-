# -*- coding: utf-8 -*-
"""Breadth First (Graph) Search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g2fnQFVJG08BlDLJxP2Aa4AqNXJDGHfK
"""

#James Baumhardt
#BFS Graph algorithm

from collections import deque

class graph:

  #initializes matrix with zeros
  def __init__(self, num_vertices):
    self.num_vertices = num_vertices
    self.adj_matrix = [[0] * num_vertices for _ in range(num_vertices)]

  #adds edge between 2 vertices
  def add_edge(self, a, b):
    #sets entry in matrix to 1 to represent edge between (a, b)
    self.adj_matrix[a][b] = 1
    self.adj_matrix[b][a] = 1

  #performs BFS with starting node
  def bfs(self, start_node):
    visited = [False] * self.num_vertices
    #keep track of nodes
    queue = deque([start_node])
    visited[start_node] = True

    #stores traversal list
    final = []

    #nodes are dequeued one by one
    while queue:
      node = queue.popleft()
      final.append(node)

      for neighbor in range(self.num_vertices):
        #if neighbor not visited and edge is present, add neighbor to queue
        if not visited[neighbor] and self.adj_matrix[node][neighbor] == 1:
          queue.append(neighbor)

          #mark as visited
          visited[neighbor] = True

    return final


#input *edges*
edges = [(1, 2), (2, 3), (3, 1), (3, 4), (4, 5)]

#Determine the number of vertices by finding the maximum node in the edges
num_vertices = max(max(edges, key=lambda x: max(x))) + 1

#Create graph
g = graph(num_vertices)
for a, b in edges:
  g.add_edge(a, b)

#Start BFS from specified node
start_node = 3
final = g.bfs(start_node)

print("BFS sequence starting at node", start_node, "is", final)


#References
#https://www.geeksforgeeks.org/implementation-of-bfs-using-adjacency-matrix/
#https://favtutor.com/blogs/breadth-first-search-python
#https://stackoverflow.com/questions/44532952/find-number-of-connected-edges-to-a-node-and-node-with-max-connected-edges
#https://theprogrammingexpert.com/python-max-lambda/
#https://stackabuse.com/courses/graphs-in-python-theory-and-implementation/lessons/breadth-first-search-bfs-algorithm/
#https://www.geeksforgeeks.org/deque-in-python/