# -*- coding: utf-8 -*-
"""Longest_Common_Subsequence.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x096qGTO6m8yF6u9aIBsewy8yot9QAss
"""

#Longest Common Subsequence
#James Baumhardt

def lcs(string1, string2):
  #Get string length
  a = len(string1)
  b = len(string2)

  #Create 2D list to store lengths of strings for comparison
  table = [[0 for i in range((b) + 1)] for i in range((a) + 1)]

  #Print list
  for row in table:
    print(row)

  #Start filling table
  for i in range(1, a + 1):
    for j in range(1, b + 1):
      #Check if characters are equal
      if string1[i - 1] == string2[j - 1]:
        #Updates with previous diagonal cell + 1
        table[i][j] = table[i - 1][j - 1] + 1
      else:
        #Get max vaue from cell
        table[i][j] = max(table[i - 1][j], table[i][j - 1])

  print("-------------------")
  #Print list
  for row in table:
    print(row)
  print()

  #Get lcs length
  lcs_length = table[a][b]
  #print(lcs_length)

  #Store lcs characters
  lcs_order = [""] * lcs_length
  #print(lcs_order)

  i = a
  j = b

  #Loop through table
  while i > 0 and j > 0:
    #If characters are equal, add to lcs_order
    if string1[i - 1] == string2[j - 1]:
      lcs_order[lcs_length - 1] = string1[i - 1]
      lcs_length -= 1
      i -= 1
      j -= 1

    #If value above > value left, move up, otherwise move left
    elif table[i - 1][j] > table[i][j - 1]:
      i -= 1
    else:
      j -= 1

  #return length + lcs string
  return table[a][b], "".join(lcs_order)


#Get Input
input_string1 = "abcdd"
input_string2 = "acfdf"
result_length, result_sequence = lcs(input_string1, input_string2)

#Print Output
print("Strings: \"{}\", \"{}\"".format(input_string1,input_string2))
print("LCS Length: {}, LCS Sequence: \"{}\"".format(result_length,result_sequence))


#References
#https://www.geeksforgeeks.org/longest-common-subsequence-dp-4/
#https://www.youtube.com/watch?v=HgUOWB0StNE
#https://www.geeksforgeeks.org/python-using-2d-arrays-lists-the-right-way/
#https://www.programiz.com/dsa/longest-common-subsequence
#https://www.youtube.com/watch?v=FWyANT-7iq8